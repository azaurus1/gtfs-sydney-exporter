// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.6.1
// source: transit_v2.proto

package transit_realtime

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TrackDirection int32

const (
	TrackDirection_UP   TrackDirection = 0
	TrackDirection_DOWN TrackDirection = 1
)

// Enum value maps for TrackDirection.
var (
	TrackDirection_name = map[int32]string{
		0: "UP",
		1: "DOWN",
	}
	TrackDirection_value = map[string]int32{
		"UP":   0,
		"DOWN": 1,
	}
)

func (x TrackDirection) Enum() *TrackDirection {
	p := new(TrackDirection)
	*p = x
	return p
}

func (x TrackDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrackDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_transit_v2_proto_enumTypes[0].Descriptor()
}

func (TrackDirection) Type() protoreflect.EnumType {
	return &file_transit_v2_proto_enumTypes[0]
}

func (x TrackDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TrackDirection) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TrackDirection(num)
	return nil
}

// Deprecated: Use TrackDirection.Descriptor instead.
func (TrackDirection) EnumDescriptor() ([]byte, []int) {
	return file_transit_v2_proto_rawDescGZIP(), []int{0}
}

type FeedHeader_Incrementality int32

const (
	FeedHeader_FULL_DATASET FeedHeader_Incrementality = 0
	FeedHeader_DIFFERENTIAL FeedHeader_Incrementality = 1
)

// Enum value maps for FeedHeader_Incrementality.
var (
	FeedHeader_Incrementality_name = map[int32]string{
		0: "FULL_DATASET",
		1: "DIFFERENTIAL",
	}
	FeedHeader_Incrementality_value = map[string]int32{
		"FULL_DATASET": 0,
		"DIFFERENTIAL": 1,
	}
)

func (x FeedHeader_Incrementality) Enum() *FeedHeader_Incrementality {
	p := new(FeedHeader_Incrementality)
	*p = x
	return p
}

func (x FeedHeader_Incrementality) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeedHeader_Incrementality) Descriptor() protoreflect.EnumDescriptor {
	return file_transit_v2_proto_enumTypes[1].Descriptor()
}

func (FeedHeader_Incrementality) Type() protoreflect.EnumType {
	return &file_transit_v2_proto_enumTypes[1]
}

func (x FeedHeader_Incrementality) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *FeedHeader_Incrementality) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = FeedHeader_Incrementality(num)
	return nil
}

// Deprecated: Use FeedHeader_Incrementality.Descriptor instead.
func (FeedHeader_Incrementality) EnumDescriptor() ([]byte, []int) {
	return file_transit_v2_proto_rawDescGZIP(), []int{1, 0}
}

type TripUpdate_StopTimeUpdate_ScheduleRelationship int32

const (
	TripUpdate_StopTimeUpdate_SCHEDULED   TripUpdate_StopTimeUpdate_ScheduleRelationship = 0
	TripUpdate_StopTimeUpdate_SKIPPED     TripUpdate_StopTimeUpdate_ScheduleRelationship = 1
	TripUpdate_StopTimeUpdate_NO_DATA     TripUpdate_StopTimeUpdate_ScheduleRelationship = 2
	TripUpdate_StopTimeUpdate_UNSCHEDULED TripUpdate_StopTimeUpdate_ScheduleRelationship = 3 // NEW
)

// Enum value maps for TripUpdate_StopTimeUpdate_ScheduleRelationship.
var (
	TripUpdate_StopTimeUpdate_ScheduleRelationship_name = map[int32]string{
		0: "SCHEDULED",
		1: "SKIPPED",
		2: "NO_DATA",
		3: "UNSCHEDULED",
	}
	TripUpdate_StopTimeUpdate_ScheduleRelationship_value = map[string]int32{
		"SCHEDULED":   0,
		"SKIPPED":     1,
		"NO_DATA":     2,
		"UNSCHEDULED": 3,
	}
)

func (x TripUpdate_StopTimeUpdate_ScheduleRelationship) Enum() *TripUpdate_StopTimeUpdate_ScheduleRelationship {
	p := new(TripUpdate_StopTimeUpdate_ScheduleRelationship)
	*p = x
	return p
}

func (x TripUpdate_StopTimeUpdate_ScheduleRelationship) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TripUpdate_StopTimeUpdate_ScheduleRelationship) Descriptor() protoreflect.EnumDescriptor {
	return file_transit_v2_proto_enumTypes[2].Descriptor()
}

func (TripUpdate_StopTimeUpdate_ScheduleRelationship) Type() protoreflect.EnumType {
	return &file_transit_v2_proto_enumTypes[2]
}

func (x TripUpdate_StopTimeUpdate_ScheduleRelationship) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TripUpdate_StopTimeUpdate_ScheduleRelationship) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TripUpdate_StopTimeUpdate_ScheduleRelationship(num)
	return nil
}

// Deprecated: Use TripUpdate_StopTimeUpdate_ScheduleRelationship.Descriptor instead.
func (TripUpdate_StopTimeUpdate_ScheduleRelationship) EnumDescriptor() ([]byte, []int) {
	return file_transit_v2_proto_rawDescGZIP(), []int{3, 1, 0}
}

type TripUpdate_StopTimeUpdate_OccupancyStatus int32

const (
	TripUpdate_StopTimeUpdate_EMPTY                      TripUpdate_StopTimeUpdate_OccupancyStatus = 0
	TripUpdate_StopTimeUpdate_MANY_SEATS_AVAILABLE       TripUpdate_StopTimeUpdate_OccupancyStatus = 1
	TripUpdate_StopTimeUpdate_FEW_SEATS_AVAILABLE        TripUpdate_StopTimeUpdate_OccupancyStatus = 2
	TripUpdate_StopTimeUpdate_STANDING_ROOM_ONLY         TripUpdate_StopTimeUpdate_OccupancyStatus = 3
	TripUpdate_StopTimeUpdate_CRUSHED_STANDING_ROOM_ONLY TripUpdate_StopTimeUpdate_OccupancyStatus = 4
	TripUpdate_StopTimeUpdate_FULL                       TripUpdate_StopTimeUpdate_OccupancyStatus = 5
	TripUpdate_StopTimeUpdate_NOT_ACCEPTING_PASSENGERS   TripUpdate_StopTimeUpdate_OccupancyStatus = 6
)

// Enum value maps for TripUpdate_StopTimeUpdate_OccupancyStatus.
var (
	TripUpdate_StopTimeUpdate_OccupancyStatus_name = map[int32]string{
		0: "EMPTY",
		1: "MANY_SEATS_AVAILABLE",
		2: "FEW_SEATS_AVAILABLE",
		3: "STANDING_ROOM_ONLY",
		4: "CRUSHED_STANDING_ROOM_ONLY",
		5: "FULL",
		6: "NOT_ACCEPTING_PASSENGERS",
	}
	TripUpdate_StopTimeUpdate_OccupancyStatus_value = map[string]int32{
		"EMPTY":                      0,
		"MANY_SEATS_AVAILABLE":       1,
		"FEW_SEATS_AVAILABLE":        2,
		"STANDING_ROOM_ONLY":         3,
		"CRUSHED_STANDING_ROOM_ONLY": 4,
		"FULL":                       5,
		"NOT_ACCEPTING_PASSENGERS":   6,
	}
)

func (x TripUpdate_StopTimeUpdate_OccupancyStatus) Enum() *TripUpdate_StopTimeUpdate_OccupancyStatus {
	p := new(TripUpdate_StopTimeUpdate_OccupancyStatus)
	*p = x
	return p
}

func (x TripUpdate_StopTimeUpdate_OccupancyStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TripUpdate_StopTimeUpdate_OccupancyStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_transit_v2_proto_enumTypes[3].Descriptor()
}

func (TripUpdate_StopTimeUpdate_OccupancyStatus) Type() protoreflect.EnumType {
	return &file_transit_v2_proto_enumTypes[3]
}

func (x TripUpdate_StopTimeUpdate_OccupancyStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TripUpdate_StopTimeUpdate_OccupancyStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TripUpdate_StopTimeUpdate_OccupancyStatus(num)
	return nil
}

// Deprecated: Use TripUpdate_StopTimeUpdate_OccupancyStatus.Descriptor instead.
func (TripUpdate_StopTimeUpdate_OccupancyStatus) EnumDescriptor() ([]byte, []int) {
	return file_transit_v2_proto_rawDescGZIP(), []int{3, 1, 1}
}

type VehiclePosition_VehicleStopStatus int32

const (
	VehiclePosition_INCOMING_AT   VehiclePosition_VehicleStopStatus = 0
	VehiclePosition_STOPPED_AT    VehiclePosition_VehicleStopStatus = 1
	VehiclePosition_IN_TRANSIT_TO VehiclePosition_VehicleStopStatus = 2
)

// Enum value maps for VehiclePosition_VehicleStopStatus.
var (
	VehiclePosition_VehicleStopStatus_name = map[int32]string{
		0: "INCOMING_AT",
		1: "STOPPED_AT",
		2: "IN_TRANSIT_TO",
	}
	VehiclePosition_VehicleStopStatus_value = map[string]int32{
		"INCOMING_AT":   0,
		"STOPPED_AT":    1,
		"IN_TRANSIT_TO": 2,
	}
)

func (x VehiclePosition_VehicleStopStatus) Enum() *VehiclePosition_VehicleStopStatus {
	p := new(VehiclePosition_VehicleStopStatus)
	*p = x
	return p
}

func (x VehiclePosition_VehicleStopStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VehiclePosition_VehicleStopStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_transit_v2_proto_enumTypes[4].Descriptor()
}

func (VehiclePosition_VehicleStopStatus) Type() protoreflect.EnumType {
	return &file_transit_v2_proto_enumTypes[4]
}

func (x VehiclePosition_VehicleStopStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *VehiclePosition_VehicleStopStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = VehiclePosition_VehicleStopStatus(num)
	return nil
}

// Deprecated: Use VehiclePosition_VehicleStopStatus.Descriptor instead.
func (VehiclePosition_VehicleStopStatus) EnumDescriptor() ([]byte, []int) {
	return file_transit_v2_proto_rawDescGZIP(), []int{4, 0}
}

type VehiclePosition_CongestionLevel int32

const (
	VehiclePosition_UNKNOWN_CONGESTION_LEVEL VehiclePosition_CongestionLevel = 0
	VehiclePosition_RUNNING_SMOOTHLY         VehiclePosition_CongestionLevel = 1
	VehiclePosition_STOP_AND_GO              VehiclePosition_CongestionLevel = 2
	VehiclePosition_CONGESTION               VehiclePosition_CongestionLevel = 3
	VehiclePosition_SEVERE_CONGESTION        VehiclePosition_CongestionLevel = 4 // NEW
)

// Enum value maps for VehiclePosition_CongestionLevel.
var (
	VehiclePosition_CongestionLevel_name = map[int32]string{
		0: "UNKNOWN_CONGESTION_LEVEL",
		1: "RUNNING_SMOOTHLY",
		2: "STOP_AND_GO",
		3: "CONGESTION",
		4: "SEVERE_CONGESTION",
	}
	VehiclePosition_CongestionLevel_value = map[string]int32{
		"UNKNOWN_CONGESTION_LEVEL": 0,
		"RUNNING_SMOOTHLY":         1,
		"STOP_AND_GO":              2,
		"CONGESTION":               3,
		"SEVERE_CONGESTION":        4,
	}
)

func (x VehiclePosition_CongestionLevel) Enum() *VehiclePosition_CongestionLevel {
	p := new(VehiclePosition_CongestionLevel)
	*p = x
	return p
}

func (x VehiclePosition_CongestionLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VehiclePosition_CongestionLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_transit_v2_proto_enumTypes[5].Descriptor()
}

func (VehiclePosition_CongestionLevel) Type() protoreflect.EnumType {
	return &file_transit_v2_proto_enumTypes[5]
}

func (x VehiclePosition_CongestionLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *VehiclePosition_CongestionLevel) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = VehiclePosition_CongestionLevel(num)
	return nil
}

// Deprecated: Use VehiclePosition_CongestionLevel.Descriptor instead.
func (VehiclePosition_CongestionLevel) EnumDescriptor() ([]byte, []int) {
	return file_transit_v2_proto_rawDescGZIP(), []int{4, 1}
}

type VehiclePosition_OccupancyStatus int32

const (
	VehiclePosition_EMPTY                      VehiclePosition_OccupancyStatus = 0
	VehiclePosition_MANY_SEATS_AVAILABLE       VehiclePosition_OccupancyStatus = 1
	VehiclePosition_FEW_SEATS_AVAILABLE        VehiclePosition_OccupancyStatus = 2
	VehiclePosition_STANDING_ROOM_ONLY         VehiclePosition_OccupancyStatus = 3
	VehiclePosition_CRUSHED_STANDING_ROOM_ONLY VehiclePosition_OccupancyStatus = 4
	VehiclePosition_FULL                       VehiclePosition_OccupancyStatus = 5
	VehiclePosition_NOT_ACCEPTING_PASSENGERS   VehiclePosition_OccupancyStatus = 6
)

// Enum value maps for VehiclePosition_OccupancyStatus.
var (
	VehiclePosition_OccupancyStatus_name = map[int32]string{
		0: "EMPTY",
		1: "MANY_SEATS_AVAILABLE",
		2: "FEW_SEATS_AVAILABLE",
		3: "STANDING_ROOM_ONLY",
		4: "CRUSHED_STANDING_ROOM_ONLY",
		5: "FULL",
		6: "NOT_ACCEPTING_PASSENGERS",
	}
	VehiclePosition_OccupancyStatus_value = map[string]int32{
		"EMPTY":                      0,
		"MANY_SEATS_AVAILABLE":       1,
		"FEW_SEATS_AVAILABLE":        2,
		"STANDING_ROOM_ONLY":         3,
		"CRUSHED_STANDING_ROOM_ONLY": 4,
		"FULL":                       5,
		"NOT_ACCEPTING_PASSENGERS":   6,
	}
)

func (x VehiclePosition_OccupancyStatus) Enum() *VehiclePosition_OccupancyStatus {
	p := new(VehiclePosition_OccupancyStatus)
	*p = x
	return p
}

func (x VehiclePosition_OccupancyStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VehiclePosition_OccupancyStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_transit_v2_proto_enumTypes[6].Descriptor()
}

func (VehiclePosition_OccupancyStatus) Type() protoreflect.EnumType {
	return &file_transit_v2_proto_enumTypes[6]
}

func (x VehiclePosition_OccupancyStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *VehiclePosition_OccupancyStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = VehiclePosition_OccupancyStatus(num)
	return nil
}

// Deprecated: Use VehiclePosition_OccupancyStatus.Descriptor instead.
func (VehiclePosition_OccupancyStatus) EnumDescriptor() ([]byte, []int) {
	return file_transit_v2_proto_rawDescGZIP(), []int{4, 2}
}

type Alert_Cause int32

const (
	Alert_UNKNOWN_CAUSE     Alert_Cause = 1
	Alert_OTHER_CAUSE       Alert_Cause = 2 // NEW
	Alert_TECHNICAL_PROBLEM Alert_Cause = 3
	Alert_STRIKE            Alert_Cause = 4 // NEW
	Alert_DEMONSTRATION     Alert_Cause = 5 // NEW
	Alert_ACCIDENT          Alert_Cause = 6
	Alert_HOLIDAY           Alert_Cause = 7
	Alert_WEATHER           Alert_Cause = 8
	Alert_MAINTENANCE       Alert_Cause = 9
	Alert_CONSTRUCTION      Alert_Cause = 10
	Alert_POLICE_ACTIVITY   Alert_Cause = 11
	Alert_MEDICAL_EMERGENCY Alert_Cause = 12
)

// Enum value maps for Alert_Cause.
var (
	Alert_Cause_name = map[int32]string{
		1:  "UNKNOWN_CAUSE",
		2:  "OTHER_CAUSE",
		3:  "TECHNICAL_PROBLEM",
		4:  "STRIKE",
		5:  "DEMONSTRATION",
		6:  "ACCIDENT",
		7:  "HOLIDAY",
		8:  "WEATHER",
		9:  "MAINTENANCE",
		10: "CONSTRUCTION",
		11: "POLICE_ACTIVITY",
		12: "MEDICAL_EMERGENCY",
	}
	Alert_Cause_value = map[string]int32{
		"UNKNOWN_CAUSE":     1,
		"OTHER_CAUSE":       2,
		"TECHNICAL_PROBLEM": 3,
		"STRIKE":            4,
		"DEMONSTRATION":     5,
		"ACCIDENT":          6,
		"HOLIDAY":           7,
		"WEATHER":           8,
		"MAINTENANCE":       9,
		"CONSTRUCTION":      10,
		"POLICE_ACTIVITY":   11,
		"MEDICAL_EMERGENCY": 12,
	}
)

func (x Alert_Cause) Enum() *Alert_Cause {
	p := new(Alert_Cause)
	*p = x
	return p
}

func (x Alert_Cause) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Alert_Cause) Descriptor() protoreflect.EnumDescriptor {
	return file_transit_v2_proto_enumTypes[7].Descriptor()
}

func (Alert_Cause) Type() protoreflect.EnumType {
	return &file_transit_v2_proto_enumTypes[7]
}

func (x Alert_Cause) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Alert_Cause) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Alert_Cause(num)
	return nil
}

// Deprecated: Use Alert_Cause.Descriptor instead.
func (Alert_Cause) EnumDescriptor() ([]byte, []int) {
	return file_transit_v2_proto_rawDescGZIP(), []int{5, 0}
}

type Alert_Effect int32

const (
	Alert_NO_SERVICE          Alert_Effect = 1
	Alert_REDUCED_SERVICE     Alert_Effect = 2
	Alert_SIGNIFICANT_DELAYS  Alert_Effect = 3
	Alert_DETOUR              Alert_Effect = 4
	Alert_ADDITIONAL_SERVICE  Alert_Effect = 5
	Alert_MODIFIED_SERVICE    Alert_Effect = 6
	Alert_OTHER_EFFECT        Alert_Effect = 7
	Alert_UNKNOWN_EFFECT      Alert_Effect = 8
	Alert_STOP_MOVED          Alert_Effect = 9
	Alert_NO_EFFECT           Alert_Effect = 10 // NEW
	Alert_ACCESSIBILITY_ISSUE Alert_Effect = 11 // NEW
)

// Enum value maps for Alert_Effect.
var (
	Alert_Effect_name = map[int32]string{
		1:  "NO_SERVICE",
		2:  "REDUCED_SERVICE",
		3:  "SIGNIFICANT_DELAYS",
		4:  "DETOUR",
		5:  "ADDITIONAL_SERVICE",
		6:  "MODIFIED_SERVICE",
		7:  "OTHER_EFFECT",
		8:  "UNKNOWN_EFFECT",
		9:  "STOP_MOVED",
		10: "NO_EFFECT",
		11: "ACCESSIBILITY_ISSUE",
	}
	Alert_Effect_value = map[string]int32{
		"NO_SERVICE":          1,
		"REDUCED_SERVICE":     2,
		"SIGNIFICANT_DELAYS":  3,
		"DETOUR":              4,
		"ADDITIONAL_SERVICE":  5,
		"MODIFIED_SERVICE":    6,
		"OTHER_EFFECT":        7,
		"UNKNOWN_EFFECT":      8,
		"STOP_MOVED":          9,
		"NO_EFFECT":           10,
		"ACCESSIBILITY_ISSUE": 11,
	}
)

func (x Alert_Effect) Enum() *Alert_Effect {
	p := new(Alert_Effect)
	*p = x
	return p
}

func (x Alert_Effect) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Alert_Effect) Descriptor() protoreflect.EnumDescriptor {
	return file_transit_v2_proto_enumTypes[8].Descriptor()
}

func (Alert_Effect) Type() protoreflect.EnumType {
	return &file_transit_v2_proto_enumTypes[8]
}

func (x Alert_Effect) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Alert_Effect) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Alert_Effect(num)
	return nil
}

// Deprecated: Use Alert_Effect.Descriptor instead.
func (Alert_Effect) EnumDescriptor() ([]byte, []int) {
	return file_transit_v2_proto_rawDescGZIP(), []int{5, 1}
}

type Alert_SeverityLevel int32

const (
	Alert_UNKNOWN_SEVERITY Alert_SeverityLevel = 1
	Alert_INFO             Alert_SeverityLevel = 2
	Alert_WARNING          Alert_SeverityLevel = 3
	Alert_SEVERE           Alert_SeverityLevel = 4
)

// Enum value maps for Alert_SeverityLevel.
var (
	Alert_SeverityLevel_name = map[int32]string{
		1: "UNKNOWN_SEVERITY",
		2: "INFO",
		3: "WARNING",
		4: "SEVERE",
	}
	Alert_SeverityLevel_value = map[string]int32{
		"UNKNOWN_SEVERITY": 1,
		"INFO":             2,
		"WARNING":          3,
		"SEVERE":           4,
	}
)

func (x Alert_SeverityLevel) Enum() *Alert_SeverityLevel {
	p := new(Alert_SeverityLevel)
	*p = x
	return p
}

func (x Alert_SeverityLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Alert_SeverityLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_transit_v2_proto_enumTypes[9].Descriptor()
}

func (Alert_SeverityLevel) Type() protoreflect.EnumType {
	return &file_transit_v2_proto_enumTypes[9]
}

func (x Alert_SeverityLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Alert_SeverityLevel) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Alert_SeverityLevel(num)
	return nil
}

// Deprecated: Use Alert_SeverityLevel.Descriptor instead.
func (Alert_SeverityLevel) EnumDescriptor() ([]byte, []int) {
	return file_transit_v2_proto_rawDescGZIP(), []int{5, 2}
}

type TripDescriptor_ScheduleRelationship int32

const (
	TripDescriptor_SCHEDULED   TripDescriptor_ScheduleRelationship = 0
	TripDescriptor_ADDED       TripDescriptor_ScheduleRelationship = 1
	TripDescriptor_UNSCHEDULED TripDescriptor_ScheduleRelationship = 2
	TripDescriptor_CANCELED    TripDescriptor_ScheduleRelationship = 3
	TripDescriptor_REPLACEMENT TripDescriptor_ScheduleRelationship = 5 // KEEP IT
)

// Enum value maps for TripDescriptor_ScheduleRelationship.
var (
	TripDescriptor_ScheduleRelationship_name = map[int32]string{
		0: "SCHEDULED",
		1: "ADDED",
		2: "UNSCHEDULED",
		3: "CANCELED",
		5: "REPLACEMENT",
	}
	TripDescriptor_ScheduleRelationship_value = map[string]int32{
		"SCHEDULED":   0,
		"ADDED":       1,
		"UNSCHEDULED": 2,
		"CANCELED":    3,
		"REPLACEMENT": 5,
	}
)

func (x TripDescriptor_ScheduleRelationship) Enum() *TripDescriptor_ScheduleRelationship {
	p := new(TripDescriptor_ScheduleRelationship)
	*p = x
	return p
}

func (x TripDescriptor_ScheduleRelationship) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TripDescriptor_ScheduleRelationship) Descriptor() protoreflect.EnumDescriptor {
	return file_transit_v2_proto_enumTypes[10].Descriptor()
}

func (TripDescriptor_ScheduleRelationship) Type() protoreflect.EnumType {
	return &file_transit_v2_proto_enumTypes[10]
}

func (x TripDescriptor_ScheduleRelationship) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TripDescriptor_ScheduleRelationship) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TripDescriptor_ScheduleRelationship(num)
	return nil
}

// Deprecated: Use TripDescriptor_ScheduleRelationship.Descriptor instead.
func (TripDescriptor_ScheduleRelationship) EnumDescriptor() ([]byte, []int) {
	return file_transit_v2_proto_rawDescGZIP(), []int{9, 0}
}

type CarriageDescriptor_OccupancyStatus int32

const (
	CarriageDescriptor_EMPTY                      CarriageDescriptor_OccupancyStatus = 0
	CarriageDescriptor_MANY_SEATS_AVAILABLE       CarriageDescriptor_OccupancyStatus = 1
	CarriageDescriptor_FEW_SEATS_AVAILABLE        CarriageDescriptor_OccupancyStatus = 2
	CarriageDescriptor_STANDING_ROOM_ONLY         CarriageDescriptor_OccupancyStatus = 3
	CarriageDescriptor_CRUSHED_STANDING_ROOM_ONLY CarriageDescriptor_OccupancyStatus = 4
	CarriageDescriptor_FULL                       CarriageDescriptor_OccupancyStatus = 5
)

// Enum value maps for CarriageDescriptor_OccupancyStatus.
var (
	CarriageDescriptor_OccupancyStatus_name = map[int32]string{
		0: "EMPTY",
		1: "MANY_SEATS_AVAILABLE",
		2: "FEW_SEATS_AVAILABLE",
		3: "STANDING_ROOM_ONLY",
		4: "CRUSHED_STANDING_ROOM_ONLY",
		5: "FULL",
	}
	CarriageDescriptor_OccupancyStatus_value = map[string]int32{
		"EMPTY":                      0,
		"MANY_SEATS_AVAILABLE":       1,
		"FEW_SEATS_AVAILABLE":        2,
		"STANDING_ROOM_ONLY":         3,
		"CRUSHED_STANDING_ROOM_ONLY": 4,
		"FULL":                       5,
	}
)

func (x CarriageDescriptor_OccupancyStatus) Enum() *CarriageDescriptor_OccupancyStatus {
	p := new(CarriageDescriptor_OccupancyStatus)
	*p = x
	return p
}

func (x CarriageDescriptor_OccupancyStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CarriageDescriptor_OccupancyStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_transit_v2_proto_enumTypes[11].Descriptor()
}

func (CarriageDescriptor_OccupancyStatus) Type() protoreflect.EnumType {
	return &file_transit_v2_proto_enumTypes[11]
}

func (x CarriageDescriptor_OccupancyStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CarriageDescriptor_OccupancyStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CarriageDescriptor_OccupancyStatus(num)
	return nil
}

// Deprecated: Use CarriageDescriptor_OccupancyStatus.Descriptor instead.
func (CarriageDescriptor_OccupancyStatus) EnumDescriptor() ([]byte, []int) {
	return file_transit_v2_proto_rawDescGZIP(), []int{12, 0}
}

type CarriageDescriptor_ToiletStatus int32

const (
	CarriageDescriptor_NONE       CarriageDescriptor_ToiletStatus = 0
	CarriageDescriptor_NORMAL     CarriageDescriptor_ToiletStatus = 1
	CarriageDescriptor_ACCESSIBLE CarriageDescriptor_ToiletStatus = 2
)

// Enum value maps for CarriageDescriptor_ToiletStatus.
var (
	CarriageDescriptor_ToiletStatus_name = map[int32]string{
		0: "NONE",
		1: "NORMAL",
		2: "ACCESSIBLE",
	}
	CarriageDescriptor_ToiletStatus_value = map[string]int32{
		"NONE":       0,
		"NORMAL":     1,
		"ACCESSIBLE": 2,
	}
)

func (x CarriageDescriptor_ToiletStatus) Enum() *CarriageDescriptor_ToiletStatus {
	p := new(CarriageDescriptor_ToiletStatus)
	*p = x
	return p
}

func (x CarriageDescriptor_ToiletStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CarriageDescriptor_ToiletStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_transit_v2_proto_enumTypes[12].Descriptor()
}

func (CarriageDescriptor_ToiletStatus) Type() protoreflect.EnumType {
	return &file_transit_v2_proto_enumTypes[12]
}

func (x CarriageDescriptor_ToiletStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CarriageDescriptor_ToiletStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CarriageDescriptor_ToiletStatus(num)
	return nil
}

// Deprecated: Use CarriageDescriptor_ToiletStatus.Descriptor instead.
func (CarriageDescriptor_ToiletStatus) EnumDescriptor() ([]byte, []int) {
	return file_transit_v2_proto_rawDescGZIP(), []int{12, 1}
}

type FeedMessage struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	Header *FeedHeader   `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	Entity []*FeedEntity `protobuf:"bytes,2,rep,name=entity" json:"entity,omitempty"`
}

func (x *FeedMessage) Reset() {
	*x = FeedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transit_v2_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedMessage) ProtoMessage() {}

func (x *FeedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_transit_v2_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedMessage.ProtoReflect.Descriptor instead.
func (*FeedMessage) Descriptor() ([]byte, []int) {
	return file_transit_v2_proto_rawDescGZIP(), []int{0}
}

func (x *FeedMessage) GetHeader() *FeedHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *FeedMessage) GetEntity() []*FeedEntity {
	if x != nil {
		return x.Entity
	}
	return nil
}

type FeedHeader struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	GtfsRealtimeVersion *string                    `protobuf:"bytes,1,req,name=gtfs_realtime_version,json=gtfsRealtimeVersion" json:"gtfs_realtime_version,omitempty"`
	Incrementality      *FeedHeader_Incrementality `protobuf:"varint,2,opt,name=incrementality,enum=transit_realtime.FeedHeader_Incrementality,def=0" json:"incrementality,omitempty"`
	Timestamp           *uint64                    `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
}

// Default values for FeedHeader fields.
const (
	Default_FeedHeader_Incrementality = FeedHeader_FULL_DATASET
)

func (x *FeedHeader) Reset() {
	*x = FeedHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transit_v2_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedHeader) ProtoMessage() {}

func (x *FeedHeader) ProtoReflect() protoreflect.Message {
	mi := &file_transit_v2_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedHeader.ProtoReflect.Descriptor instead.
func (*FeedHeader) Descriptor() ([]byte, []int) {
	return file_transit_v2_proto_rawDescGZIP(), []int{1}
}

func (x *FeedHeader) GetGtfsRealtimeVersion() string {
	if x != nil && x.GtfsRealtimeVersion != nil {
		return *x.GtfsRealtimeVersion
	}
	return ""
}

func (x *FeedHeader) GetIncrementality() FeedHeader_Incrementality {
	if x != nil && x.Incrementality != nil {
		return *x.Incrementality
	}
	return Default_FeedHeader_Incrementality
}

func (x *FeedHeader) GetTimestamp() uint64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

type FeedEntity struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	Id         *string          `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	IsDeleted  *bool            `protobuf:"varint,2,opt,name=is_deleted,json=isDeleted,def=0" json:"is_deleted,omitempty"`
	TripUpdate *TripUpdate      `protobuf:"bytes,3,opt,name=trip_update,json=tripUpdate" json:"trip_update,omitempty"`
	Vehicle    *VehiclePosition `protobuf:"bytes,4,opt,name=vehicle" json:"vehicle,omitempty"`
	Alert      *Alert           `protobuf:"bytes,5,opt,name=alert" json:"alert,omitempty"`
}

// Default values for FeedEntity fields.
const (
	Default_FeedEntity_IsDeleted = bool(false)
)

func (x *FeedEntity) Reset() {
	*x = FeedEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transit_v2_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedEntity) ProtoMessage() {}

func (x *FeedEntity) ProtoReflect() protoreflect.Message {
	mi := &file_transit_v2_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedEntity.ProtoReflect.Descriptor instead.
func (*FeedEntity) Descriptor() ([]byte, []int) {
	return file_transit_v2_proto_rawDescGZIP(), []int{2}
}

func (x *FeedEntity) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *FeedEntity) GetIsDeleted() bool {
	if x != nil && x.IsDeleted != nil {
		return *x.IsDeleted
	}
	return Default_FeedEntity_IsDeleted
}

func (x *FeedEntity) GetTripUpdate() *TripUpdate {
	if x != nil {
		return x.TripUpdate
	}
	return nil
}

func (x *FeedEntity) GetVehicle() *VehiclePosition {
	if x != nil {
		return x.Vehicle
	}
	return nil
}

func (x *FeedEntity) GetAlert() *Alert {
	if x != nil {
		return x.Alert
	}
	return nil
}

type TripUpdate struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	Trip           *TripDescriptor              `protobuf:"bytes,1,req,name=trip" json:"trip,omitempty"`
	Vehicle        *VehicleDescriptor           `protobuf:"bytes,3,opt,name=vehicle" json:"vehicle,omitempty"`
	StopTimeUpdate []*TripUpdate_StopTimeUpdate `protobuf:"bytes,2,rep,name=stop_time_update,json=stopTimeUpdate" json:"stop_time_update,omitempty"`
	Timestamp      *uint64                      `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	Delay          *int32                       `protobuf:"varint,5,opt,name=delay" json:"delay,omitempty"` // NEW
}

func (x *TripUpdate) Reset() {
	*x = TripUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transit_v2_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TripUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TripUpdate) ProtoMessage() {}

func (x *TripUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_transit_v2_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TripUpdate.ProtoReflect.Descriptor instead.
func (*TripUpdate) Descriptor() ([]byte, []int) {
	return file_transit_v2_proto_rawDescGZIP(), []int{3}
}

func (x *TripUpdate) GetTrip() *TripDescriptor {
	if x != nil {
		return x.Trip
	}
	return nil
}

func (x *TripUpdate) GetVehicle() *VehicleDescriptor {
	if x != nil {
		return x.Vehicle
	}
	return nil
}

func (x *TripUpdate) GetStopTimeUpdate() []*TripUpdate_StopTimeUpdate {
	if x != nil {
		return x.StopTimeUpdate
	}
	return nil
}

func (x *TripUpdate) GetTimestamp() uint64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *TripUpdate) GetDelay() int32 {
	if x != nil && x.Delay != nil {
		return *x.Delay
	}
	return 0
}

type VehiclePosition struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	Trip                *TripDescriptor                    `protobuf:"bytes,1,opt,name=trip" json:"trip,omitempty"`
	Vehicle             *VehicleDescriptor                 `protobuf:"bytes,8,opt,name=vehicle" json:"vehicle,omitempty"`
	Position            *Position                          `protobuf:"bytes,2,opt,name=position" json:"position,omitempty"`
	CurrentStopSequence *uint32                            `protobuf:"varint,3,opt,name=current_stop_sequence,json=currentStopSequence" json:"current_stop_sequence,omitempty"`
	StopId              *string                            `protobuf:"bytes,7,opt,name=stop_id,json=stopId" json:"stop_id,omitempty"`
	CurrentStatus       *VehiclePosition_VehicleStopStatus `protobuf:"varint,4,opt,name=current_status,json=currentStatus,enum=transit_realtime.VehiclePosition_VehicleStopStatus,def=2" json:"current_status,omitempty"`
	Timestamp           *uint64                            `protobuf:"varint,5,opt,name=timestamp" json:"timestamp,omitempty"`
	CongestionLevel     *VehiclePosition_CongestionLevel   `protobuf:"varint,6,opt,name=congestion_level,json=congestionLevel,enum=transit_realtime.VehiclePosition_CongestionLevel" json:"congestion_level,omitempty"`
	OccupancyStatus     *VehiclePosition_OccupancyStatus   `protobuf:"varint,9,opt,name=occupancy_status,json=occupancyStatus,enum=transit_realtime.VehiclePosition_OccupancyStatus" json:"occupancy_status,omitempty"`
}

// Default values for VehiclePosition fields.
const (
	Default_VehiclePosition_CurrentStatus = VehiclePosition_IN_TRANSIT_TO
)

func (x *VehiclePosition) Reset() {
	*x = VehiclePosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transit_v2_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VehiclePosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehiclePosition) ProtoMessage() {}

func (x *VehiclePosition) ProtoReflect() protoreflect.Message {
	mi := &file_transit_v2_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehiclePosition.ProtoReflect.Descriptor instead.
func (*VehiclePosition) Descriptor() ([]byte, []int) {
	return file_transit_v2_proto_rawDescGZIP(), []int{4}
}

func (x *VehiclePosition) GetTrip() *TripDescriptor {
	if x != nil {
		return x.Trip
	}
	return nil
}

func (x *VehiclePosition) GetVehicle() *VehicleDescriptor {
	if x != nil {
		return x.Vehicle
	}
	return nil
}

func (x *VehiclePosition) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *VehiclePosition) GetCurrentStopSequence() uint32 {
	if x != nil && x.CurrentStopSequence != nil {
		return *x.CurrentStopSequence
	}
	return 0
}

func (x *VehiclePosition) GetStopId() string {
	if x != nil && x.StopId != nil {
		return *x.StopId
	}
	return ""
}

func (x *VehiclePosition) GetCurrentStatus() VehiclePosition_VehicleStopStatus {
	if x != nil && x.CurrentStatus != nil {
		return *x.CurrentStatus
	}
	return Default_VehiclePosition_CurrentStatus
}

func (x *VehiclePosition) GetTimestamp() uint64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *VehiclePosition) GetCongestionLevel() VehiclePosition_CongestionLevel {
	if x != nil && x.CongestionLevel != nil {
		return *x.CongestionLevel
	}
	return VehiclePosition_UNKNOWN_CONGESTION_LEVEL
}

func (x *VehiclePosition) GetOccupancyStatus() VehiclePosition_OccupancyStatus {
	if x != nil && x.OccupancyStatus != nil {
		return *x.OccupancyStatus
	}
	return VehiclePosition_EMPTY
}

type Alert struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	ActivePeriod       []*TimeRange         `protobuf:"bytes,1,rep,name=active_period,json=activePeriod" json:"active_period,omitempty"`
	InformedEntity     []*EntitySelector    `protobuf:"bytes,5,rep,name=informed_entity,json=informedEntity" json:"informed_entity,omitempty"`
	Cause              *Alert_Cause         `protobuf:"varint,6,opt,name=cause,enum=transit_realtime.Alert_Cause,def=1" json:"cause,omitempty"`
	Effect             *Alert_Effect        `protobuf:"varint,7,opt,name=effect,enum=transit_realtime.Alert_Effect,def=8" json:"effect,omitempty"`
	Url                *TranslatedString    `protobuf:"bytes,8,opt,name=url" json:"url,omitempty"`
	HeaderText         *TranslatedString    `protobuf:"bytes,10,opt,name=header_text,json=headerText" json:"header_text,omitempty"`
	DescriptionText    *TranslatedString    `protobuf:"bytes,11,opt,name=description_text,json=descriptionText" json:"description_text,omitempty"`
	TtsHeaderText      *TranslatedString    `protobuf:"bytes,12,opt,name=tts_header_text,json=ttsHeaderText" json:"tts_header_text,omitempty"`                                          // NEW
	TtsDescriptionText *TranslatedString    `protobuf:"bytes,13,opt,name=tts_description_text,json=ttsDescriptionText" json:"tts_description_text,omitempty"`                           // NEW
	SeverityLevel      *Alert_SeverityLevel `protobuf:"varint,14,opt,name=severity_level,json=severityLevel,enum=transit_realtime.Alert_SeverityLevel" json:"severity_level,omitempty"` // NEW
}

// Default values for Alert fields.
const (
	Default_Alert_Cause  = Alert_UNKNOWN_CAUSE
	Default_Alert_Effect = Alert_UNKNOWN_EFFECT
)

func (x *Alert) Reset() {
	*x = Alert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transit_v2_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Alert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Alert) ProtoMessage() {}

func (x *Alert) ProtoReflect() protoreflect.Message {
	mi := &file_transit_v2_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Alert.ProtoReflect.Descriptor instead.
func (*Alert) Descriptor() ([]byte, []int) {
	return file_transit_v2_proto_rawDescGZIP(), []int{5}
}

func (x *Alert) GetActivePeriod() []*TimeRange {
	if x != nil {
		return x.ActivePeriod
	}
	return nil
}

func (x *Alert) GetInformedEntity() []*EntitySelector {
	if x != nil {
		return x.InformedEntity
	}
	return nil
}

func (x *Alert) GetCause() Alert_Cause {
	if x != nil && x.Cause != nil {
		return *x.Cause
	}
	return Default_Alert_Cause
}

func (x *Alert) GetEffect() Alert_Effect {
	if x != nil && x.Effect != nil {
		return *x.Effect
	}
	return Default_Alert_Effect
}

func (x *Alert) GetUrl() *TranslatedString {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *Alert) GetHeaderText() *TranslatedString {
	if x != nil {
		return x.HeaderText
	}
	return nil
}

func (x *Alert) GetDescriptionText() *TranslatedString {
	if x != nil {
		return x.DescriptionText
	}
	return nil
}

func (x *Alert) GetTtsHeaderText() *TranslatedString {
	if x != nil {
		return x.TtsHeaderText
	}
	return nil
}

func (x *Alert) GetTtsDescriptionText() *TranslatedString {
	if x != nil {
		return x.TtsDescriptionText
	}
	return nil
}

func (x *Alert) GetSeverityLevel() Alert_SeverityLevel {
	if x != nil && x.SeverityLevel != nil {
		return *x.SeverityLevel
	}
	return Alert_UNKNOWN_SEVERITY
}

// NEW
// An addition to the GTFS static bundle
type UpdateBundle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the name of the bundle to be updated. This is to allow consumers to update the correct bundle
	GTFSStaticBundle *string `protobuf:"bytes,1,req,name=GTFSStaticBundle" json:"GTFSStaticBundle,omitempty"`
	// This field is the update sequence ID. It should commence at 1 for the first update to a static bundle and increment by 1 for each successive update
	// The intent of this field is to allow the consumer to identify updates they may already have processed.
	UpdateSequence *int32 `protobuf:"varint,2,req,name=update_sequence,json=updateSequence" json:"update_sequence,omitempty"`
	// repeated field to cancel scheduled trips in the bundle. This is the trip_id to cancel.
	CancelledTrip []string `protobuf:"bytes,4,rep,name=cancelled_trip,json=cancelledTrip" json:"cancelled_trip,omitempty"`
}

func (x *UpdateBundle) Reset() {
	*x = UpdateBundle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transit_v2_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBundle) ProtoMessage() {}

func (x *UpdateBundle) ProtoReflect() protoreflect.Message {
	mi := &file_transit_v2_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBundle.ProtoReflect.Descriptor instead.
func (*UpdateBundle) Descriptor() ([]byte, []int) {
	return file_transit_v2_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateBundle) GetGTFSStaticBundle() string {
	if x != nil && x.GTFSStaticBundle != nil {
		return *x.GTFSStaticBundle
	}
	return ""
}

func (x *UpdateBundle) GetUpdateSequence() int32 {
	if x != nil && x.UpdateSequence != nil {
		return *x.UpdateSequence
	}
	return 0
}

func (x *UpdateBundle) GetCancelledTrip() []string {
	if x != nil {
		return x.CancelledTrip
	}
	return nil
}

type TimeRange struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	Start *uint64 `protobuf:"varint,1,opt,name=start" json:"start,omitempty"`
	End   *uint64 `protobuf:"varint,2,opt,name=end" json:"end,omitempty"`
}

func (x *TimeRange) Reset() {
	*x = TimeRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transit_v2_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeRange) ProtoMessage() {}

func (x *TimeRange) ProtoReflect() protoreflect.Message {
	mi := &file_transit_v2_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeRange.ProtoReflect.Descriptor instead.
func (*TimeRange) Descriptor() ([]byte, []int) {
	return file_transit_v2_proto_rawDescGZIP(), []int{7}
}

func (x *TimeRange) GetStart() uint64 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *TimeRange) GetEnd() uint64 {
	if x != nil && x.End != nil {
		return *x.End
	}
	return 0
}

type Position struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	Latitude  *float32 `protobuf:"fixed32,1,req,name=latitude" json:"latitude,omitempty"`
	Longitude *float32 `protobuf:"fixed32,2,req,name=longitude" json:"longitude,omitempty"`
	Bearing   *float32 `protobuf:"fixed32,3,opt,name=bearing" json:"bearing,omitempty"`
	Odometer  *float64 `protobuf:"fixed64,4,opt,name=odometer" json:"odometer,omitempty"`
	Speed     *float32 `protobuf:"fixed32,5,opt,name=speed" json:"speed,omitempty"`
}

func (x *Position) Reset() {
	*x = Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transit_v2_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_transit_v2_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_transit_v2_proto_rawDescGZIP(), []int{8}
}

func (x *Position) GetLatitude() float32 {
	if x != nil && x.Latitude != nil {
		return *x.Latitude
	}
	return 0
}

func (x *Position) GetLongitude() float32 {
	if x != nil && x.Longitude != nil {
		return *x.Longitude
	}
	return 0
}

func (x *Position) GetBearing() float32 {
	if x != nil && x.Bearing != nil {
		return *x.Bearing
	}
	return 0
}

func (x *Position) GetOdometer() float64 {
	if x != nil && x.Odometer != nil {
		return *x.Odometer
	}
	return 0
}

func (x *Position) GetSpeed() float32 {
	if x != nil && x.Speed != nil {
		return *x.Speed
	}
	return 0
}

type TripDescriptor struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	TripId               *string                              `protobuf:"bytes,1,opt,name=trip_id,json=tripId" json:"trip_id,omitempty"`
	RouteId              *string                              `protobuf:"bytes,5,opt,name=route_id,json=routeId" json:"route_id,omitempty"`
	DirectionId          *uint32                              `protobuf:"varint,6,opt,name=direction_id,json=directionId" json:"direction_id,omitempty"` // NEW
	StartTime            *string                              `protobuf:"bytes,2,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	StartDate            *string                              `protobuf:"bytes,3,opt,name=start_date,json=startDate" json:"start_date,omitempty"`
	ScheduleRelationship *TripDescriptor_ScheduleRelationship `protobuf:"varint,4,opt,name=schedule_relationship,json=scheduleRelationship,enum=transit_realtime.TripDescriptor_ScheduleRelationship" json:"schedule_relationship,omitempty"`
}

func (x *TripDescriptor) Reset() {
	*x = TripDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transit_v2_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TripDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TripDescriptor) ProtoMessage() {}

func (x *TripDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_transit_v2_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TripDescriptor.ProtoReflect.Descriptor instead.
func (*TripDescriptor) Descriptor() ([]byte, []int) {
	return file_transit_v2_proto_rawDescGZIP(), []int{9}
}

func (x *TripDescriptor) GetTripId() string {
	if x != nil && x.TripId != nil {
		return *x.TripId
	}
	return ""
}

func (x *TripDescriptor) GetRouteId() string {
	if x != nil && x.RouteId != nil {
		return *x.RouteId
	}
	return ""
}

func (x *TripDescriptor) GetDirectionId() uint32 {
	if x != nil && x.DirectionId != nil {
		return *x.DirectionId
	}
	return 0
}

func (x *TripDescriptor) GetStartTime() string {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return ""
}

func (x *TripDescriptor) GetStartDate() string {
	if x != nil && x.StartDate != nil {
		return *x.StartDate
	}
	return ""
}

func (x *TripDescriptor) GetScheduleRelationship() TripDescriptor_ScheduleRelationship {
	if x != nil && x.ScheduleRelationship != nil {
		return *x.ScheduleRelationship
	}
	return TripDescriptor_SCHEDULED
}

type VehicleDescriptor struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	Id           *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Label        *string `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
	LicensePlate *string `protobuf:"bytes,3,opt,name=license_plate,json=licensePlate" json:"license_plate,omitempty"`
}

func (x *VehicleDescriptor) Reset() {
	*x = VehicleDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transit_v2_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VehicleDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleDescriptor) ProtoMessage() {}

func (x *VehicleDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_transit_v2_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleDescriptor.ProtoReflect.Descriptor instead.
func (*VehicleDescriptor) Descriptor() ([]byte, []int) {
	return file_transit_v2_proto_rawDescGZIP(), []int{10}
}

func (x *VehicleDescriptor) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *VehicleDescriptor) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *VehicleDescriptor) GetLicensePlate() string {
	if x != nil && x.LicensePlate != nil {
		return *x.LicensePlate
	}
	return ""
}

// NEW
type TfnswVehicleDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AirConditioned           *bool   `protobuf:"varint,1,opt,name=air_conditioned,json=airConditioned,def=0" json:"air_conditioned,omitempty"`
	WheelchairAccessible     *int32  `protobuf:"varint,2,opt,name=wheelchair_accessible,json=wheelchairAccessible,def=0" json:"wheelchair_accessible,omitempty"`
	VehicleModel             *string `protobuf:"bytes,3,opt,name=vehicle_model,json=vehicleModel" json:"vehicle_model,omitempty"`
	PerformingPriorTrip      *bool   `protobuf:"varint,4,opt,name=performing_prior_trip,json=performingPriorTrip,def=0" json:"performing_prior_trip,omitempty"`
	SpecialVehicleAttributes *int32  `protobuf:"varint,5,opt,name=special_vehicle_attributes,json=specialVehicleAttributes,def=0" json:"special_vehicle_attributes,omitempty"`
}

// Default values for TfnswVehicleDescriptor fields.
const (
	Default_TfnswVehicleDescriptor_AirConditioned           = bool(false)
	Default_TfnswVehicleDescriptor_WheelchairAccessible     = int32(0)
	Default_TfnswVehicleDescriptor_PerformingPriorTrip      = bool(false)
	Default_TfnswVehicleDescriptor_SpecialVehicleAttributes = int32(0)
)

func (x *TfnswVehicleDescriptor) Reset() {
	*x = TfnswVehicleDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transit_v2_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TfnswVehicleDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TfnswVehicleDescriptor) ProtoMessage() {}

func (x *TfnswVehicleDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_transit_v2_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TfnswVehicleDescriptor.ProtoReflect.Descriptor instead.
func (*TfnswVehicleDescriptor) Descriptor() ([]byte, []int) {
	return file_transit_v2_proto_rawDescGZIP(), []int{11}
}

func (x *TfnswVehicleDescriptor) GetAirConditioned() bool {
	if x != nil && x.AirConditioned != nil {
		return *x.AirConditioned
	}
	return Default_TfnswVehicleDescriptor_AirConditioned
}

func (x *TfnswVehicleDescriptor) GetWheelchairAccessible() int32 {
	if x != nil && x.WheelchairAccessible != nil {
		return *x.WheelchairAccessible
	}
	return Default_TfnswVehicleDescriptor_WheelchairAccessible
}

func (x *TfnswVehicleDescriptor) GetVehicleModel() string {
	if x != nil && x.VehicleModel != nil {
		return *x.VehicleModel
	}
	return ""
}

func (x *TfnswVehicleDescriptor) GetPerformingPriorTrip() bool {
	if x != nil && x.PerformingPriorTrip != nil {
		return *x.PerformingPriorTrip
	}
	return Default_TfnswVehicleDescriptor_PerformingPriorTrip
}

func (x *TfnswVehicleDescriptor) GetSpecialVehicleAttributes() int32 {
	if x != nil && x.SpecialVehicleAttributes != nil {
		return *x.SpecialVehicleAttributes
	}
	return Default_TfnswVehicleDescriptor_SpecialVehicleAttributes
}

// NEW
type CarriageDescriptor struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	Name                     *string                             `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	PositionInConsist        *int32                              `protobuf:"varint,2,req,name=position_in_consist,json=positionInConsist" json:"position_in_consist,omitempty"`
	OccupancyStatus          *CarriageDescriptor_OccupancyStatus `protobuf:"varint,3,opt,name=occupancy_status,json=occupancyStatus,enum=transit_realtime.CarriageDescriptor_OccupancyStatus" json:"occupancy_status,omitempty"`
	QuietCarriage            *bool                               `protobuf:"varint,4,opt,name=quiet_carriage,json=quietCarriage,def=0" json:"quiet_carriage,omitempty"`
	Toilet                   *CarriageDescriptor_ToiletStatus    `protobuf:"varint,5,opt,name=toilet,enum=transit_realtime.CarriageDescriptor_ToiletStatus" json:"toilet,omitempty"`
	LuggageRack              *bool                               `protobuf:"varint,6,opt,name=luggage_rack,json=luggageRack,def=0" json:"luggage_rack,omitempty"`
	DepartureOccupancyStatus *CarriageDescriptor_OccupancyStatus `protobuf:"varint,7,opt,name=departure_occupancy_status,json=departureOccupancyStatus,enum=transit_realtime.CarriageDescriptor_OccupancyStatus" json:"departure_occupancy_status,omitempty"` //08/6/22 - Changed to Departure Occupancy Status to ensure its in line with GTFS-R Specifications(https://github.com/google/transit/blob/master/gtfs-realtime/spec/en/reference.md#message-stoptimeevent)
}

// Default values for CarriageDescriptor fields.
const (
	Default_CarriageDescriptor_QuietCarriage = bool(false)
	Default_CarriageDescriptor_LuggageRack   = bool(false)
)

func (x *CarriageDescriptor) Reset() {
	*x = CarriageDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transit_v2_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CarriageDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CarriageDescriptor) ProtoMessage() {}

func (x *CarriageDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_transit_v2_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CarriageDescriptor.ProtoReflect.Descriptor instead.
func (*CarriageDescriptor) Descriptor() ([]byte, []int) {
	return file_transit_v2_proto_rawDescGZIP(), []int{12}
}

func (x *CarriageDescriptor) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CarriageDescriptor) GetPositionInConsist() int32 {
	if x != nil && x.PositionInConsist != nil {
		return *x.PositionInConsist
	}
	return 0
}

func (x *CarriageDescriptor) GetOccupancyStatus() CarriageDescriptor_OccupancyStatus {
	if x != nil && x.OccupancyStatus != nil {
		return *x.OccupancyStatus
	}
	return CarriageDescriptor_EMPTY
}

func (x *CarriageDescriptor) GetQuietCarriage() bool {
	if x != nil && x.QuietCarriage != nil {
		return *x.QuietCarriage
	}
	return Default_CarriageDescriptor_QuietCarriage
}

func (x *CarriageDescriptor) GetToilet() CarriageDescriptor_ToiletStatus {
	if x != nil && x.Toilet != nil {
		return *x.Toilet
	}
	return CarriageDescriptor_NONE
}

func (x *CarriageDescriptor) GetLuggageRack() bool {
	if x != nil && x.LuggageRack != nil {
		return *x.LuggageRack
	}
	return Default_CarriageDescriptor_LuggageRack
}

func (x *CarriageDescriptor) GetDepartureOccupancyStatus() CarriageDescriptor_OccupancyStatus {
	if x != nil && x.DepartureOccupancyStatus != nil {
		return *x.DepartureOccupancyStatus
	}
	return CarriageDescriptor_EMPTY
}

type EntitySelector struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	AgencyId    *string         `protobuf:"bytes,1,opt,name=agency_id,json=agencyId" json:"agency_id,omitempty"`
	RouteId     *string         `protobuf:"bytes,2,opt,name=route_id,json=routeId" json:"route_id,omitempty"`
	RouteType   *int32          `protobuf:"varint,3,opt,name=route_type,json=routeType" json:"route_type,omitempty"`
	Trip        *TripDescriptor `protobuf:"bytes,4,opt,name=trip" json:"trip,omitempty"`
	StopId      *string         `protobuf:"bytes,5,opt,name=stop_id,json=stopId" json:"stop_id,omitempty"`
	DirectionId *uint32         `protobuf:"varint,6,opt,name=direction_id,json=directionId" json:"direction_id,omitempty"` // NEW
}

func (x *EntitySelector) Reset() {
	*x = EntitySelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transit_v2_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntitySelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntitySelector) ProtoMessage() {}

func (x *EntitySelector) ProtoReflect() protoreflect.Message {
	mi := &file_transit_v2_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntitySelector.ProtoReflect.Descriptor instead.
func (*EntitySelector) Descriptor() ([]byte, []int) {
	return file_transit_v2_proto_rawDescGZIP(), []int{13}
}

func (x *EntitySelector) GetAgencyId() string {
	if x != nil && x.AgencyId != nil {
		return *x.AgencyId
	}
	return ""
}

func (x *EntitySelector) GetRouteId() string {
	if x != nil && x.RouteId != nil {
		return *x.RouteId
	}
	return ""
}

func (x *EntitySelector) GetRouteType() int32 {
	if x != nil && x.RouteType != nil {
		return *x.RouteType
	}
	return 0
}

func (x *EntitySelector) GetTrip() *TripDescriptor {
	if x != nil {
		return x.Trip
	}
	return nil
}

func (x *EntitySelector) GetStopId() string {
	if x != nil && x.StopId != nil {
		return *x.StopId
	}
	return ""
}

func (x *EntitySelector) GetDirectionId() uint32 {
	if x != nil && x.DirectionId != nil {
		return *x.DirectionId
	}
	return 0
}

type TranslatedString struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	Translation []*TranslatedString_Translation `protobuf:"bytes,1,rep,name=translation" json:"translation,omitempty"`
}

func (x *TranslatedString) Reset() {
	*x = TranslatedString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transit_v2_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranslatedString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranslatedString) ProtoMessage() {}

func (x *TranslatedString) ProtoReflect() protoreflect.Message {
	mi := &file_transit_v2_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranslatedString.ProtoReflect.Descriptor instead.
func (*TranslatedString) Descriptor() ([]byte, []int) {
	return file_transit_v2_proto_rawDescGZIP(), []int{14}
}

func (x *TranslatedString) GetTranslation() []*TranslatedString_Translation {
	if x != nil {
		return x.Translation
	}
	return nil
}

type TripUpdate_StopTimeEvent struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	Delay       *int32 `protobuf:"varint,1,opt,name=delay" json:"delay,omitempty"`
	Time        *int64 `protobuf:"varint,2,opt,name=time" json:"time,omitempty"`
	Uncertainty *int32 `protobuf:"varint,3,opt,name=uncertainty" json:"uncertainty,omitempty"`
}

func (x *TripUpdate_StopTimeEvent) Reset() {
	*x = TripUpdate_StopTimeEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transit_v2_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TripUpdate_StopTimeEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TripUpdate_StopTimeEvent) ProtoMessage() {}

func (x *TripUpdate_StopTimeEvent) ProtoReflect() protoreflect.Message {
	mi := &file_transit_v2_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TripUpdate_StopTimeEvent.ProtoReflect.Descriptor instead.
func (*TripUpdate_StopTimeEvent) Descriptor() ([]byte, []int) {
	return file_transit_v2_proto_rawDescGZIP(), []int{3, 0}
}

func (x *TripUpdate_StopTimeEvent) GetDelay() int32 {
	if x != nil && x.Delay != nil {
		return *x.Delay
	}
	return 0
}

func (x *TripUpdate_StopTimeEvent) GetTime() int64 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *TripUpdate_StopTimeEvent) GetUncertainty() int32 {
	if x != nil && x.Uncertainty != nil {
		return *x.Uncertainty
	}
	return 0
}

type TripUpdate_StopTimeUpdate struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	StopSequence             *uint32                                         `protobuf:"varint,1,opt,name=stop_sequence,json=stopSequence" json:"stop_sequence,omitempty"`
	StopId                   *string                                         `protobuf:"bytes,4,opt,name=stop_id,json=stopId" json:"stop_id,omitempty"`
	Arrival                  *TripUpdate_StopTimeEvent                       `protobuf:"bytes,2,opt,name=arrival" json:"arrival,omitempty"`
	Departure                *TripUpdate_StopTimeEvent                       `protobuf:"bytes,3,opt,name=departure" json:"departure,omitempty"`
	ScheduleRelationship     *TripUpdate_StopTimeUpdate_ScheduleRelationship `protobuf:"varint,5,opt,name=schedule_relationship,json=scheduleRelationship,enum=transit_realtime.TripUpdate_StopTimeUpdate_ScheduleRelationship,def=0" json:"schedule_relationship,omitempty"`
	DepartureOccupancyStatus *TripUpdate_StopTimeUpdate_OccupancyStatus      `protobuf:"varint,6,opt,name=departure_occupancy_status,json=departureOccupancyStatus,enum=transit_realtime.TripUpdate_StopTimeUpdate_OccupancyStatus" json:"departure_occupancy_status,omitempty"`
}

// Default values for TripUpdate_StopTimeUpdate fields.
const (
	Default_TripUpdate_StopTimeUpdate_ScheduleRelationship = TripUpdate_StopTimeUpdate_SCHEDULED
)

func (x *TripUpdate_StopTimeUpdate) Reset() {
	*x = TripUpdate_StopTimeUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transit_v2_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TripUpdate_StopTimeUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TripUpdate_StopTimeUpdate) ProtoMessage() {}

func (x *TripUpdate_StopTimeUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_transit_v2_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TripUpdate_StopTimeUpdate.ProtoReflect.Descriptor instead.
func (*TripUpdate_StopTimeUpdate) Descriptor() ([]byte, []int) {
	return file_transit_v2_proto_rawDescGZIP(), []int{3, 1}
}

func (x *TripUpdate_StopTimeUpdate) GetStopSequence() uint32 {
	if x != nil && x.StopSequence != nil {
		return *x.StopSequence
	}
	return 0
}

func (x *TripUpdate_StopTimeUpdate) GetStopId() string {
	if x != nil && x.StopId != nil {
		return *x.StopId
	}
	return ""
}

func (x *TripUpdate_StopTimeUpdate) GetArrival() *TripUpdate_StopTimeEvent {
	if x != nil {
		return x.Arrival
	}
	return nil
}

func (x *TripUpdate_StopTimeUpdate) GetDeparture() *TripUpdate_StopTimeEvent {
	if x != nil {
		return x.Departure
	}
	return nil
}

func (x *TripUpdate_StopTimeUpdate) GetScheduleRelationship() TripUpdate_StopTimeUpdate_ScheduleRelationship {
	if x != nil && x.ScheduleRelationship != nil {
		return *x.ScheduleRelationship
	}
	return Default_TripUpdate_StopTimeUpdate_ScheduleRelationship
}

func (x *TripUpdate_StopTimeUpdate) GetDepartureOccupancyStatus() TripUpdate_StopTimeUpdate_OccupancyStatus {
	if x != nil && x.DepartureOccupancyStatus != nil {
		return *x.DepartureOccupancyStatus
	}
	return TripUpdate_StopTimeUpdate_EMPTY
}

type TranslatedString_Translation struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	Text     *string `protobuf:"bytes,1,req,name=text" json:"text,omitempty"`
	Language *string `protobuf:"bytes,2,opt,name=language" json:"language,omitempty"`
}

func (x *TranslatedString_Translation) Reset() {
	*x = TranslatedString_Translation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transit_v2_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranslatedString_Translation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranslatedString_Translation) ProtoMessage() {}

func (x *TranslatedString_Translation) ProtoReflect() protoreflect.Message {
	mi := &file_transit_v2_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranslatedString_Translation.ProtoReflect.Descriptor instead.
func (*TranslatedString_Translation) Descriptor() ([]byte, []int) {
	return file_transit_v2_proto_rawDescGZIP(), []int{14, 0}
}

func (x *TranslatedString_Translation) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *TranslatedString_Translation) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

var file_transit_v2_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*FeedEntity)(nil),
		ExtensionType: (*UpdateBundle)(nil),
		Field:         1007,
		Name:          "transit_realtime.update",
		Tag:           "bytes,1007,opt,name=update",
		Filename:      "transit_v2.proto",
	},
	{
		ExtendedType:  (*VehiclePosition)(nil),
		ExtensionType: ([]*CarriageDescriptor)(nil),
		Field:         1007,
		Name:          "transit_realtime.consist",
		Tag:           "bytes,1007,rep,name=consist",
		Filename:      "transit_v2.proto",
	},
	{
		ExtendedType:  (*Position)(nil),
		ExtensionType: (*TrackDirection)(nil),
		Field:         1007,
		Name:          "transit_realtime.track_direction",
		Tag:           "varint,1007,opt,name=track_direction,enum=transit_realtime.TrackDirection",
		Filename:      "transit_v2.proto",
	},
	{
		ExtendedType:  (*VehicleDescriptor)(nil),
		ExtensionType: (*TfnswVehicleDescriptor)(nil),
		Field:         1007,
		Name:          "transit_realtime.tfnsw_vehicle_descriptor",
		Tag:           "bytes,1007,opt,name=tfnsw_vehicle_descriptor",
		Filename:      "transit_v2.proto",
	},
	{
		ExtendedType:  (*TripUpdate_StopTimeUpdate)(nil),
		ExtensionType: ([]*CarriageDescriptor)(nil),
		Field:         1007,
		Name:          "transit_realtime.carriage_seq_predictive_occupancy",
		Tag:           "bytes,1007,rep,name=carriage_seq_predictive_occupancy",
		Filename:      "transit_v2.proto",
	},
}

// Extension fields to FeedEntity.
var (
	// optional transit_realtime.UpdateBundle update = 1007;
	E_Update = &file_transit_v2_proto_extTypes[0] // NEW
)

// Extension fields to VehiclePosition.
var (
	// repeated transit_realtime.CarriageDescriptor consist = 1007;
	E_Consist = &file_transit_v2_proto_extTypes[1]
)

// Extension fields to Position.
var (
	// optional transit_realtime.TrackDirection track_direction = 1007;
	E_TrackDirection = &file_transit_v2_proto_extTypes[2] // NEW
)

// Extension fields to VehicleDescriptor.
var (
	// optional transit_realtime.TfnswVehicleDescriptor tfnsw_vehicle_descriptor = 1007;
	E_TfnswVehicleDescriptor = &file_transit_v2_proto_extTypes[3] // NEW
)

// Extension fields to TripUpdate_StopTimeUpdate.
var (
	// repeated transit_realtime.CarriageDescriptor carriage_seq_predictive_occupancy = 1007;
	E_CarriageSeqPredictiveOccupancy = &file_transit_v2_proto_extTypes[4] // NEW - 22/2/22 - Predictive Real Time Occupancy added to TripUpdate->Stop Time Update
)

var File_transit_v2_proto protoreflect.FileDescriptor

var file_transit_v2_proto_rawDesc = []byte{
	0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x76, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x6c,
	0x74, 0x69, 0x6d, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x0b, 0x46, 0x65, 0x65, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x72,
	0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x06, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x46, 0x65,
	0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x2a, 0x06, 0x08, 0xe8, 0x07, 0x10, 0xd0, 0x0f, 0x22, 0xff, 0x01, 0x0a, 0x0a, 0x46, 0x65, 0x65,
	0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x67, 0x74, 0x66, 0x73, 0x5f,
	0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x13, 0x67, 0x74, 0x66, 0x73, 0x52, 0x65, 0x61, 0x6c,
	0x74, 0x69, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x0e, 0x69,
	0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x72, 0x65,
	0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x3a, 0x0c, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x53, 0x45, 0x54, 0x52, 0x0e,
	0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x34, 0x0a, 0x0e,
	0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x10,
	0x0a, 0x0c, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x53, 0x45, 0x54, 0x10, 0x00,
	0x12, 0x10, 0x0a, 0x0c, 0x44, 0x49, 0x46, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c,
	0x10, 0x01, 0x2a, 0x06, 0x08, 0xe8, 0x07, 0x10, 0xd0, 0x0f, 0x22, 0xf5, 0x01, 0x0a, 0x0a, 0x46,
	0x65, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12,
	0x3d, 0x0a, 0x0b, 0x74, 0x72, 0x69, 0x70, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x72,
	0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x72, 0x69, 0x70, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x0a, 0x74, 0x72, 0x69, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3b,
	0x0a, 0x07, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x52, 0x05, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2a, 0x06, 0x08, 0xe8, 0x07, 0x10,
	0xd0, 0x0f, 0x22, 0xe4, 0x08, 0x0a, 0x0a, 0x54, 0x72, 0x69, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x72, 0x69, 0x70, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x54, 0x72, 0x69, 0x70, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x52, 0x04, 0x74, 0x72, 0x69, 0x70, 0x12, 0x3d, 0x0a, 0x07, 0x76, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x56, 0x65, 0x68, 0x69,
	0x63, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x07, 0x76,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x55, 0x0a, 0x10, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x54, 0x72, 0x69, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x53,
	0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x73,
	0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x64,
	0x65, 0x6c, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x1a, 0x63, 0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x75, 0x6e, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x2a, 0x06,
	0x08, 0xe8, 0x07, 0x10, 0xd0, 0x0f, 0x1a, 0xe8, 0x05, 0x0a, 0x0e, 0x53, 0x74, 0x6f, 0x70, 0x54,
	0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x6f,
	0x70, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x73, 0x74, 0x6f, 0x70, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x07, 0x61, 0x72, 0x72, 0x69, 0x76,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x72, 0x69, 0x70,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x12, 0x48, 0x0a,
	0x09, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x54, 0x72, 0x69, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x53,
	0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x64, 0x65,
	0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69,
	0x74, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x72, 0x69, 0x70, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x3a, 0x09, 0x53, 0x43, 0x48, 0x45, 0x44,
	0x55, 0x4c, 0x45, 0x44, 0x52, 0x14, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x79, 0x0a, 0x1a, 0x64, 0x65,
	0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63,
	0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x54, 0x72, 0x69, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x6f,
	0x70, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x4f, 0x63, 0x63, 0x75,
	0x70, 0x61, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x18, 0x64, 0x65, 0x70,
	0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x50, 0x0a, 0x14, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x0d, 0x0a,
	0x09, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x53, 0x4b, 0x49, 0x50, 0x50, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x5f,
	0x44, 0x41, 0x54, 0x41, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x43, 0x48, 0x45,
	0x44, 0x55, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x22, 0xaf, 0x01, 0x0a, 0x0f, 0x4f, 0x63, 0x63, 0x75,
	0x70, 0x61, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x09, 0x0a, 0x05, 0x45,
	0x4d, 0x50, 0x54, 0x59, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x53,
	0x45, 0x41, 0x54, 0x53, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01,
	0x12, 0x17, 0x0a, 0x13, 0x46, 0x45, 0x57, 0x5f, 0x53, 0x45, 0x41, 0x54, 0x53, 0x5f, 0x41, 0x56,
	0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10,
	0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x52, 0x55, 0x53, 0x48, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x41,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10,
	0x04, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x4e,
	0x4f, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x41, 0x53,
	0x53, 0x45, 0x4e, 0x47, 0x45, 0x52, 0x53, 0x10, 0x06, 0x2a, 0x06, 0x08, 0xe8, 0x07, 0x10, 0xd0,
	0x0f, 0x2a, 0x06, 0x08, 0xe8, 0x07, 0x10, 0xd0, 0x0f, 0x22, 0xd2, 0x07, 0x0a, 0x0f, 0x56, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a,
	0x04, 0x74, 0x72, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54,
	0x72, 0x69, 0x70, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x04, 0x74,
	0x72, 0x69, 0x70, 0x12, 0x3d, 0x0a, 0x07, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x72,
	0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x07, 0x76, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x72,
	0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x69, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x33, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x3a, 0x0d, 0x49, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54,
	0x5f, 0x54, 0x4f, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x5c, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x56, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0f, 0x63,
	0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x5c,
	0x0a, 0x10, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x56, 0x65, 0x68, 0x69,
	0x63, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x63, 0x63, 0x75,
	0x70, 0x61, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0f, 0x6f, 0x63, 0x63,
	0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x47, 0x0a, 0x11,
	0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x54,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x41, 0x54,
	0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54,
	0x5f, 0x54, 0x4f, 0x10, 0x02, 0x22, 0x7d, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x18, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x47, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e,
	0x47, 0x5f, 0x53, 0x4d, 0x4f, 0x4f, 0x54, 0x48, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b,
	0x53, 0x54, 0x4f, 0x50, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x47, 0x4f, 0x10, 0x02, 0x12, 0x0e, 0x0a,
	0x0a, 0x43, 0x4f, 0x4e, 0x47, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x15, 0x0a,
	0x11, 0x53, 0x45, 0x56, 0x45, 0x52, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x47, 0x45, 0x53, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x04, 0x22, 0xaf, 0x01, 0x0a, 0x0f, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e,
	0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x4d, 0x50, 0x54,
	0x59, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x53, 0x45, 0x41, 0x54,
	0x53, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x17, 0x0a,
	0x13, 0x46, 0x45, 0x57, 0x5f, 0x53, 0x45, 0x41, 0x54, 0x53, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x03, 0x12, 0x1e,
	0x0a, 0x1a, 0x43, 0x52, 0x55, 0x53, 0x48, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x04, 0x12, 0x08,
	0x0a, 0x04, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x4f, 0x54, 0x5f,
	0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x45, 0x4e,
	0x47, 0x45, 0x52, 0x53, 0x10, 0x06, 0x2a, 0x06, 0x08, 0xe8, 0x07, 0x10, 0xd0, 0x0f, 0x22, 0xe7,
	0x09, 0x0a, 0x05, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0c, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x49, 0x0a, 0x0f, 0x69, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x72, 0x65,
	0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0e, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x42, 0x0a, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x72,
	0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x43, 0x61,
	0x75, 0x73, 0x65, 0x3a, 0x0d, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x43, 0x41, 0x55,
	0x53, 0x45, 0x52, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x3a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x52, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x12, 0x34, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x43, 0x0a, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x4d, 0x0a, 0x10,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x5f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x4a, 0x0a, 0x0f, 0x74,
	0x74, 0x73, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x72,
	0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x74, 0x74, 0x73, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x54, 0x0a, 0x14, 0x74, 0x74, 0x73, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f,
	0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x12, 0x74, 0x74, 0x73, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x4c, 0x0a,
	0x0e, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f,
	0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x53,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0d, 0x73, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xd8, 0x01, 0x0a, 0x05,
	0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x5f, 0x43, 0x41, 0x55, 0x53, 0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x5f, 0x43, 0x41, 0x55, 0x53, 0x45, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x45, 0x43,
	0x48, 0x4e, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x4c, 0x45, 0x4d, 0x10, 0x03,
	0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4b, 0x45, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d,
	0x44, 0x45, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12,
	0x0c, 0x0a, 0x08, 0x41, 0x43, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x10, 0x06, 0x12, 0x0b, 0x0a,
	0x07, 0x48, 0x4f, 0x4c, 0x49, 0x44, 0x41, 0x59, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x45,
	0x41, 0x54, 0x48, 0x45, 0x52, 0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x41, 0x49, 0x4e, 0x54,
	0x45, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x4e, 0x53,
	0x54, 0x52, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x4f,
	0x4c, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x0b, 0x12,
	0x15, 0x0a, 0x11, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x45, 0x4d, 0x45, 0x52, 0x47,
	0x45, 0x4e, 0x43, 0x59, 0x10, 0x0c, 0x22, 0xdd, 0x01, 0x0a, 0x06, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10,
	0x01, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x44, 0x55, 0x43, 0x45, 0x44, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x49, 0x47, 0x4e, 0x49, 0x46,
	0x49, 0x43, 0x41, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x53, 0x10, 0x03, 0x12, 0x0a,
	0x0a, 0x06, 0x44, 0x45, 0x54, 0x4f, 0x55, 0x52, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x44,
	0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x10, 0x08, 0x12, 0x0e,
	0x0a, 0x0a, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x09, 0x12, 0x0d,
	0x0a, 0x09, 0x4e, 0x4f, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x10, 0x0a, 0x12, 0x17, 0x0a,
	0x13, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x53, 0x53, 0x55, 0x45, 0x10, 0x0b, 0x22, 0x48, 0x0a, 0x0d, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x10, 0x01, 0x12, 0x08, 0x0a,
	0x04, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x41, 0x52, 0x4e, 0x49,
	0x4e, 0x47, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x56, 0x45, 0x52, 0x45, 0x10, 0x04,
	0x2a, 0x06, 0x08, 0xe8, 0x07, 0x10, 0xd0, 0x0f, 0x22, 0x8a, 0x01, 0x0a, 0x0c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x47, 0x54, 0x46,
	0x53, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x10, 0x47, 0x54, 0x46, 0x53, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x42,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0e,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x69, 0x70,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65,
	0x64, 0x54, 0x72, 0x69, 0x70, 0x22, 0x3b, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x2a, 0x06, 0x08, 0xe8, 0x07, 0x10,
	0xd0, 0x0f, 0x22, 0x98, 0x01, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x02, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c,
	0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x02, 0x52, 0x09,
	0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x65, 0x61,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x62, 0x65, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x64, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6f, 0x64, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x2a, 0x06, 0x08, 0xe8, 0x07, 0x10, 0xd0, 0x0f, 0x22, 0xfb, 0x02,
	0x0a, 0x0e, 0x54, 0x72, 0x69, 0x70, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x72, 0x69, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x6a, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x72,
	0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x72, 0x69, 0x70, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x14, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69,
	0x70, 0x22, 0x60, 0x0a, 0x14, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x43, 0x48,
	0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x44, 0x44, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44,
	0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x10, 0x05, 0x2a, 0x06, 0x08, 0xe8, 0x07, 0x10, 0xd0, 0x0f, 0x22, 0x66, 0x0a, 0x11, 0x56,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x2a, 0x06, 0x08, 0xe8, 0x07,
	0x10, 0xd0, 0x0f, 0x22, 0xa1, 0x02, 0x0a, 0x16, 0x54, 0x66, 0x6e, 0x73, 0x77, 0x56, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x2e,
	0x0a, 0x0f, 0x61, 0x69, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0e,
	0x61, 0x69, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x12, 0x36,
	0x0a, 0x15, 0x77, 0x68, 0x65, 0x65, 0x6c, 0x63, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30,
	0x52, 0x14, 0x77, 0x68, 0x65, 0x65, 0x6c, 0x63, 0x68, 0x61, 0x69, 0x72, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x39, 0x0a, 0x15, 0x70,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x5f,
	0x74, 0x72, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x52, 0x13, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x54, 0x72, 0x69, 0x70, 0x12, 0x3f, 0x0a, 0x1a, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x5f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x18, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0xa2, 0x05, 0x0a, 0x12, 0x43, 0x61, 0x72, 0x72,
	0x69, 0x61, 0x67, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x11, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x69,
	0x73, 0x74, 0x12, 0x5f, 0x0a, 0x10, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x43, 0x61, 0x72, 0x72, 0x69, 0x61, 0x67, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x2e, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0f, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x0e, 0x71, 0x75, 0x69, 0x65, 0x74, 0x5f, 0x63, 0x61, 0x72,
	0x72, 0x69, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x0d, 0x71, 0x75, 0x69, 0x65, 0x74, 0x43, 0x61, 0x72, 0x72, 0x69, 0x61, 0x67,
	0x65, 0x12, 0x49, 0x0a, 0x06, 0x74, 0x6f, 0x69, 0x6c, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x6c,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x43, 0x61, 0x72, 0x72, 0x69, 0x61, 0x67, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x54, 0x6f, 0x69, 0x6c, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x74, 0x6f, 0x69, 0x6c, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x0c,
	0x6c, 0x75, 0x67, 0x67, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0b, 0x6c, 0x75, 0x67, 0x67, 0x61,
	0x67, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x12, 0x72, 0x0a, 0x1a, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x43, 0x61,
	0x72, 0x72, 0x69, 0x61, 0x67, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x2e, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x18, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x4f, 0x63, 0x63, 0x75, 0x70,
	0x61, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x0f, 0x4f,
	0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x09,
	0x0a, 0x05, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x41, 0x4e,
	0x59, 0x5f, 0x53, 0x45, 0x41, 0x54, 0x53, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x45, 0x57, 0x5f, 0x53, 0x45, 0x41, 0x54, 0x53,
	0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12,
	0x53, 0x54, 0x41, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x4f, 0x4e,
	0x4c, 0x59, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x52, 0x55, 0x53, 0x48, 0x45, 0x44, 0x5f,
	0x53, 0x54, 0x41, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x4f, 0x4e,
	0x4c, 0x59, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x05, 0x22, 0x34,
	0x0a, 0x0c, 0x54, 0x6f, 0x69, 0x6c, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x08,
	0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d,
	0x41, 0x4c, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x49, 0x42,
	0x4c, 0x45, 0x10, 0x02, 0x2a, 0x06, 0x08, 0xe8, 0x07, 0x10, 0xd0, 0x0f, 0x22, 0xe1, 0x01, 0x0a,
	0x0e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x1b, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x72, 0x69, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x72,
	0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x72, 0x69, 0x70, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x04, 0x74, 0x72, 0x69, 0x70, 0x12, 0x17, 0x0a, 0x07,
	0x73, 0x74, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x2a, 0x06, 0x08, 0xe8, 0x07, 0x10, 0xd0, 0x0f,
	0x22, 0xb3, 0x01, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x50, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x45, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2a, 0x06, 0x08, 0xe8, 0x07, 0x10, 0xd0, 0x0f, 0x2a, 0x06,
	0x08, 0xe8, 0x07, 0x10, 0xd0, 0x0f, 0x2a, 0x22, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x06, 0x0a, 0x02, 0x55, 0x50, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x3a, 0x55, 0x0a, 0x06, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x72,
	0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0xef, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x3a, 0x62, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x12, 0x21, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0xef, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x5f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x43, 0x61, 0x72, 0x72, 0x69, 0x61,
	0x67, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x73, 0x69, 0x73, 0x74, 0x3a, 0x66, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0xef, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x88, 0x01,
	0x0a, 0x18, 0x74, 0x66, 0x6e, 0x73, 0x77, 0x5f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x56, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18,
	0xef, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x5f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x66, 0x6e, 0x73, 0x77, 0x56,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x52, 0x16, 0x74, 0x66, 0x6e, 0x73, 0x77, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x3a, 0x9d, 0x01, 0x0a, 0x21, 0x63, 0x61, 0x72,
	0x72, 0x69, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x71, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x12, 0x2b,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x54, 0x72, 0x69, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x6f,
	0x70, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0xef, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x61,
	0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x43, 0x61, 0x72, 0x72, 0x69, 0x61, 0x67, 0x65, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x1e, 0x63, 0x61, 0x72, 0x72, 0x69, 0x61,
	0x67, 0x65, 0x53, 0x65, 0x71, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4f,
	0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x42, 0x32, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x2e, 0x72,
	0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x13, 0x2e, 0x2e, 0x2f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65,
}

var (
	file_transit_v2_proto_rawDescOnce sync.Once
	file_transit_v2_proto_rawDescData = file_transit_v2_proto_rawDesc
)

func file_transit_v2_proto_rawDescGZIP() []byte {
	file_transit_v2_proto_rawDescOnce.Do(func() {
		file_transit_v2_proto_rawDescData = protoimpl.X.CompressGZIP(file_transit_v2_proto_rawDescData)
	})
	return file_transit_v2_proto_rawDescData
}

var file_transit_v2_proto_enumTypes = make([]protoimpl.EnumInfo, 13)
var file_transit_v2_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_transit_v2_proto_goTypes = []any{
	(TrackDirection)(0),                                 // 0: transit_realtime.TrackDirection
	(FeedHeader_Incrementality)(0),                      // 1: transit_realtime.FeedHeader.Incrementality
	(TripUpdate_StopTimeUpdate_ScheduleRelationship)(0), // 2: transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship
	(TripUpdate_StopTimeUpdate_OccupancyStatus)(0),      // 3: transit_realtime.TripUpdate.StopTimeUpdate.OccupancyStatus
	(VehiclePosition_VehicleStopStatus)(0),              // 4: transit_realtime.VehiclePosition.VehicleStopStatus
	(VehiclePosition_CongestionLevel)(0),                // 5: transit_realtime.VehiclePosition.CongestionLevel
	(VehiclePosition_OccupancyStatus)(0),                // 6: transit_realtime.VehiclePosition.OccupancyStatus
	(Alert_Cause)(0),                                    // 7: transit_realtime.Alert.Cause
	(Alert_Effect)(0),                                   // 8: transit_realtime.Alert.Effect
	(Alert_SeverityLevel)(0),                            // 9: transit_realtime.Alert.SeverityLevel
	(TripDescriptor_ScheduleRelationship)(0),            // 10: transit_realtime.TripDescriptor.ScheduleRelationship
	(CarriageDescriptor_OccupancyStatus)(0),             // 11: transit_realtime.CarriageDescriptor.OccupancyStatus
	(CarriageDescriptor_ToiletStatus)(0),                // 12: transit_realtime.CarriageDescriptor.ToiletStatus
	(*FeedMessage)(nil),                                 // 13: transit_realtime.FeedMessage
	(*FeedHeader)(nil),                                  // 14: transit_realtime.FeedHeader
	(*FeedEntity)(nil),                                  // 15: transit_realtime.FeedEntity
	(*TripUpdate)(nil),                                  // 16: transit_realtime.TripUpdate
	(*VehiclePosition)(nil),                             // 17: transit_realtime.VehiclePosition
	(*Alert)(nil),                                       // 18: transit_realtime.Alert
	(*UpdateBundle)(nil),                                // 19: transit_realtime.UpdateBundle
	(*TimeRange)(nil),                                   // 20: transit_realtime.TimeRange
	(*Position)(nil),                                    // 21: transit_realtime.Position
	(*TripDescriptor)(nil),                              // 22: transit_realtime.TripDescriptor
	(*VehicleDescriptor)(nil),                           // 23: transit_realtime.VehicleDescriptor
	(*TfnswVehicleDescriptor)(nil),                      // 24: transit_realtime.TfnswVehicleDescriptor
	(*CarriageDescriptor)(nil),                          // 25: transit_realtime.CarriageDescriptor
	(*EntitySelector)(nil),                              // 26: transit_realtime.EntitySelector
	(*TranslatedString)(nil),                            // 27: transit_realtime.TranslatedString
	(*TripUpdate_StopTimeEvent)(nil),                    // 28: transit_realtime.TripUpdate.StopTimeEvent
	(*TripUpdate_StopTimeUpdate)(nil),                   // 29: transit_realtime.TripUpdate.StopTimeUpdate
	(*TranslatedString_Translation)(nil),                // 30: transit_realtime.TranslatedString.Translation
}
var file_transit_v2_proto_depIdxs = []int32{
	14, // 0: transit_realtime.FeedMessage.header:type_name -> transit_realtime.FeedHeader
	15, // 1: transit_realtime.FeedMessage.entity:type_name -> transit_realtime.FeedEntity
	1,  // 2: transit_realtime.FeedHeader.incrementality:type_name -> transit_realtime.FeedHeader.Incrementality
	16, // 3: transit_realtime.FeedEntity.trip_update:type_name -> transit_realtime.TripUpdate
	17, // 4: transit_realtime.FeedEntity.vehicle:type_name -> transit_realtime.VehiclePosition
	18, // 5: transit_realtime.FeedEntity.alert:type_name -> transit_realtime.Alert
	22, // 6: transit_realtime.TripUpdate.trip:type_name -> transit_realtime.TripDescriptor
	23, // 7: transit_realtime.TripUpdate.vehicle:type_name -> transit_realtime.VehicleDescriptor
	29, // 8: transit_realtime.TripUpdate.stop_time_update:type_name -> transit_realtime.TripUpdate.StopTimeUpdate
	22, // 9: transit_realtime.VehiclePosition.trip:type_name -> transit_realtime.TripDescriptor
	23, // 10: transit_realtime.VehiclePosition.vehicle:type_name -> transit_realtime.VehicleDescriptor
	21, // 11: transit_realtime.VehiclePosition.position:type_name -> transit_realtime.Position
	4,  // 12: transit_realtime.VehiclePosition.current_status:type_name -> transit_realtime.VehiclePosition.VehicleStopStatus
	5,  // 13: transit_realtime.VehiclePosition.congestion_level:type_name -> transit_realtime.VehiclePosition.CongestionLevel
	6,  // 14: transit_realtime.VehiclePosition.occupancy_status:type_name -> transit_realtime.VehiclePosition.OccupancyStatus
	20, // 15: transit_realtime.Alert.active_period:type_name -> transit_realtime.TimeRange
	26, // 16: transit_realtime.Alert.informed_entity:type_name -> transit_realtime.EntitySelector
	7,  // 17: transit_realtime.Alert.cause:type_name -> transit_realtime.Alert.Cause
	8,  // 18: transit_realtime.Alert.effect:type_name -> transit_realtime.Alert.Effect
	27, // 19: transit_realtime.Alert.url:type_name -> transit_realtime.TranslatedString
	27, // 20: transit_realtime.Alert.header_text:type_name -> transit_realtime.TranslatedString
	27, // 21: transit_realtime.Alert.description_text:type_name -> transit_realtime.TranslatedString
	27, // 22: transit_realtime.Alert.tts_header_text:type_name -> transit_realtime.TranslatedString
	27, // 23: transit_realtime.Alert.tts_description_text:type_name -> transit_realtime.TranslatedString
	9,  // 24: transit_realtime.Alert.severity_level:type_name -> transit_realtime.Alert.SeverityLevel
	10, // 25: transit_realtime.TripDescriptor.schedule_relationship:type_name -> transit_realtime.TripDescriptor.ScheduleRelationship
	11, // 26: transit_realtime.CarriageDescriptor.occupancy_status:type_name -> transit_realtime.CarriageDescriptor.OccupancyStatus
	12, // 27: transit_realtime.CarriageDescriptor.toilet:type_name -> transit_realtime.CarriageDescriptor.ToiletStatus
	11, // 28: transit_realtime.CarriageDescriptor.departure_occupancy_status:type_name -> transit_realtime.CarriageDescriptor.OccupancyStatus
	22, // 29: transit_realtime.EntitySelector.trip:type_name -> transit_realtime.TripDescriptor
	30, // 30: transit_realtime.TranslatedString.translation:type_name -> transit_realtime.TranslatedString.Translation
	28, // 31: transit_realtime.TripUpdate.StopTimeUpdate.arrival:type_name -> transit_realtime.TripUpdate.StopTimeEvent
	28, // 32: transit_realtime.TripUpdate.StopTimeUpdate.departure:type_name -> transit_realtime.TripUpdate.StopTimeEvent
	2,  // 33: transit_realtime.TripUpdate.StopTimeUpdate.schedule_relationship:type_name -> transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship
	3,  // 34: transit_realtime.TripUpdate.StopTimeUpdate.departure_occupancy_status:type_name -> transit_realtime.TripUpdate.StopTimeUpdate.OccupancyStatus
	15, // 35: transit_realtime.update:extendee -> transit_realtime.FeedEntity
	17, // 36: transit_realtime.consist:extendee -> transit_realtime.VehiclePosition
	21, // 37: transit_realtime.track_direction:extendee -> transit_realtime.Position
	23, // 38: transit_realtime.tfnsw_vehicle_descriptor:extendee -> transit_realtime.VehicleDescriptor
	29, // 39: transit_realtime.carriage_seq_predictive_occupancy:extendee -> transit_realtime.TripUpdate.StopTimeUpdate
	19, // 40: transit_realtime.update:type_name -> transit_realtime.UpdateBundle
	25, // 41: transit_realtime.consist:type_name -> transit_realtime.CarriageDescriptor
	0,  // 42: transit_realtime.track_direction:type_name -> transit_realtime.TrackDirection
	24, // 43: transit_realtime.tfnsw_vehicle_descriptor:type_name -> transit_realtime.TfnswVehicleDescriptor
	25, // 44: transit_realtime.carriage_seq_predictive_occupancy:type_name -> transit_realtime.CarriageDescriptor
	45, // [45:45] is the sub-list for method output_type
	45, // [45:45] is the sub-list for method input_type
	40, // [40:45] is the sub-list for extension type_name
	35, // [35:40] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_transit_v2_proto_init() }
func file_transit_v2_proto_init() {
	if File_transit_v2_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_transit_v2_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*FeedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_transit_v2_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*FeedHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_transit_v2_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*FeedEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_transit_v2_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*TripUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_transit_v2_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*VehiclePosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_transit_v2_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*Alert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_transit_v2_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateBundle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transit_v2_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*TimeRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_transit_v2_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_transit_v2_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*TripDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_transit_v2_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*VehicleDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_transit_v2_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*TfnswVehicleDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transit_v2_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*CarriageDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_transit_v2_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*EntitySelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_transit_v2_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*TranslatedString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_transit_v2_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*TripUpdate_StopTimeEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_transit_v2_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*TripUpdate_StopTimeUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_transit_v2_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*TranslatedString_Translation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_transit_v2_proto_rawDesc,
			NumEnums:      13,
			NumMessages:   18,
			NumExtensions: 5,
			NumServices:   0,
		},
		GoTypes:           file_transit_v2_proto_goTypes,
		DependencyIndexes: file_transit_v2_proto_depIdxs,
		EnumInfos:         file_transit_v2_proto_enumTypes,
		MessageInfos:      file_transit_v2_proto_msgTypes,
		ExtensionInfos:    file_transit_v2_proto_extTypes,
	}.Build()
	File_transit_v2_proto = out.File
	file_transit_v2_proto_rawDesc = nil
	file_transit_v2_proto_goTypes = nil
	file_transit_v2_proto_depIdxs = nil
}
